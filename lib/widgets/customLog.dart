import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:logger/logger.dart';
import 'package:path_provider/path_provider.dart';

late final Logger logger;

// üõ† ‡πÄ‡∏û‡∏¥‡πà‡∏° Printer ‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà Timestamp
class TimeStampedPrinter extends LogPrinter {
  final LogPrinter realPrinter;

  TimeStampedPrinter(this.realPrinter);

  @override
  List<String> log(LogEvent event) {
    final now = DateTime.now();
    final timestamp = '[${now.toIso8601String().replaceFirst('T', ' ').split('.').first}]';
    final lines = realPrinter.log(event);
    return lines.map((line) => '$timestamp $line').toList();
  }
}

class MultiOutput extends LogOutput {
  final LogOutput consoleOutput;
  final LogOutput fileOutput;

  MultiOutput({required this.consoleOutput, required this.fileOutput});

  @override
  void output(OutputEvent event) {
    consoleOutput.output(event);
    fileOutput.output(event);
  }
}

// üõ† FileOutput ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
class FileLogOutput extends LogOutput {
  late final Future<File> _logFile;

  FileLogOutput() {
    _logFile = _initLogFile();
  }

  Future<File> _initLogFile() async {
    final directory =
        await getExternalStorageDirectory(); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å getApplicationDocumentsDirectory
    final now = DateTime.now();
    final formattedDate = '${now.year}-${_twoDigits(now.month)}-${_twoDigits(now.day)}';
    final fileName = 'log_$formattedDate.txt';

    final path =
        directory!.path; // ‡πÄ‡∏ä‡πà‡∏ô /storage/self/primary/Android/data/com.example.bmt_mobile/files
    final file = File('$path/$fileName');

    logger.i('üìÇ Log file will be saved at: $path/$fileName'); // ‡∏î‡∏π path ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô

    return file;
  }

  String _twoDigits(int n) => n.toString().padLeft(2, '0');

  @override
  void output(OutputEvent event) async {
    final file = await _logFile;
    for (var line in event.lines) {
      await file.writeAsString('$line\n', mode: FileMode.append, encoding: utf8);
    }
  }
}

Future<void> setupLogger() async {
  logger = Logger(
      printer: TimeStampedPrinter(PrettyPrinter(
        methodCount: 5, // ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô StackTrace ‡∏Å‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ)
        errorMethodCount: 5,
        lineLength: 120,
        colors: false, // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏µ (‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå)
        printEmojis: kDebugMode,
      )),
      output: MultiOutput(
        consoleOutput: ConsoleOutput(), // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≠‡∏Å Console ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        fileOutput: FileLogOutput(), // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢
      ),
      level: Level.debug // <<< ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏£‡∏∞‡∏ö‡∏∏ Level.verbose ‡πÅ‡∏°‡πâ Release
      );
  logger.i('üîî Logger setup complete: Running in ${kReleaseMode ? 'RELEASE' : 'DEBUG'} mode');
}
